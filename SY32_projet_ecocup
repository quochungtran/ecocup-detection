{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"SY32_projet_ecocup","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"UgY83W28Ls_e"},"outputs":[],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","source":["cd /content/drive/MyDrive/Projet_SY32_2/"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dvYjbkH3MOhk","executionInfo":{"status":"ok","timestamp":1654346164937,"user_tz":-120,"elapsed":244,"user":{"displayName":"Quốc Hưng Trần","userId":"03834413873358683207"}},"outputId":"ed95a4f1-d11f-48fd-a1ab-26a14db882b7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/MyDrive/Projet_SY32_2\n"]}]},{"cell_type":"code","source":["ls"],"metadata":{"id":"Lp0zu_NdND-V","executionInfo":{"status":"ok","timestamp":1654346167561,"user_tz":-120,"elapsed":444,"user":{"displayName":"Quốc Hưng Trần","userId":"03834413873358683207"}},"outputId":"63695d16-3563-423c-b1ed-845695583006","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":[" \u001b[0m\u001b[01;34mdataset-main\u001b[0m/  'Resource .gdoc'   SY32_projet_ecocup   \u001b[01;34mVGG16\u001b[0m/   \u001b[01;34mYOLO\u001b[0m/\n"]}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import numpy as np\n","\n","from skimage import io , util\n","from sklearn.ensemble import AdaBoostClassifier\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn import tree\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn import svm\n","from skimage.feature import hog\n","\n","\n","X_train = []\n","y_train = []\n","X_test = []\n","y_test = []\n","for i in range(1,3001):\n","    I = io.imread('dataset-main/train/pos/%05d.png'%i)\n","    I = hog(I)\n","    # I = util.img_as_float(I)\n","    # I = I.flatten()\n","    X_train.append(I)\n","    y_train.append(1)\n","\n","for i in range(1,12001):\n","    I = io.imread('imageface/train/neg/%05d.png'%i)\n","    I = hog(I)\n","    # I = util.img_as_float(I)\n","    # I = I.flatten()\n","    X_train.append(I)\n","    y_train.append(-1)\n","\n","for i in range(1,1001):\n","    I = io.imread('imageface/test/pos/%05d.png'%i)\n","    #I = util.img_as_float(I)\n","    #I = np.fliplr(I)\n","    #I = np.flipud(I)\n","    #I = I.flatten()\n","    I = hog(I)\n","    X_test.append(I)\n","    y_test.append(1)\n","\n","for i in range(1,5256):\n","    I = io.imread('imageface/test/neg/%05d.png'%i)\n","    #I = util.img_as_float(I)\n","    #I = np.fliplr(I)\n","    #I = np.flipud(I)\n","    #I = I.flatten()\n","    I = hog(I)\n","    X_test.append(I)\n","    y_test.append(-1)\n","\n","\n","def compute(clf):\n","    clf.fit ( X_train , y_train )\n","    print(\"{} : {}\".format(type(clf),1-clf.score(X_test,y_test)))\n","\n","compute(AdaBoostClassifier( n_estimators = 50))\n","compute(KNeighborsClassifier(n_neighbors=5))\n","compute(tree.DecisionTreeClassifier())\n","compute(RandomForestClassifier(n_estimators=10))\n","compute(svm.SVC())"],"metadata":{"id":"z_tr9AcWtNOd"},"execution_count":null,"outputs":[]}]}